int printFile ( const char * fileName ) { FILE * fp = ( FILE * ) NULL ; if ( ( fp = fopen ( fileName , "r" ) ) ) { char buffer [ 512 ] ; unsigned int lNumber = 0 ; while ( fgets ( buffer , 512 , fp ) ) { printf ( "%3d: %s" , ++ lNumber , buffer ) ; } fclose ( fp ) ; return 0 ; } return 1 ; } int main ( int argc , char * argv [ ] ) { if ( argc > 1 ) { if ( printFile ( argv [ 1 ] ) ) printf ( "Argument error, the given argument is not a readable file.\n" ) ; } return 0 ; } 
int printFile ( const char * fileName ) { FILE * fp = ( FILE * ) NULL ; if ( ( fp = fopen ( fileName , "r" ) ) ) { char buffer [ 512 ] ; unsigned int lNumber = 0 ; while ( fgets ( buffer , 512 , fp ) ) { printf ( "%3d: %s" , ++ lNumber , buffer ) ; } fclose ( fp ) ; return 0 ; } return 1 ; } void inputFiltering ( char * fName ) { char buf [ 256 ] = "" ; char * c = fName , * b = buf ; for ( ; * c != '\0' ; c ++ ) { while ( * c == '/' ) c ++ ; * b ++ = * c ; } strncpy ( fName , buf , 255 ) ; } int main ( int argc , char * argv [ ] ) { if ( argc > 1 ) { char fName [ 256 ] = "" ; strncpy ( fName , argv [ 1 ] , 255 ) ; inputFiltering ( fName ) ; if ( printFile ( fName ) ) { printf ( "Argument error, the file is not readable.\n" ) ; } } return 0 ; } 
char * * fileNames = NULL ; int printFile ( const char * fileName ) { FILE * fp = ( FILE * ) NULL ; if ( ( fp = fopen ( fileName , "r" ) ) ) { char buffer [ 512 ] ; unsigned int lNumber = 0 ; printf ( ">>> %s\n" , fileName ) ; while ( fgets ( buffer , 512 , fp ) ) { printf ( "%3d: %s" , ++ lNumber , buffer ) ; } fclose ( fp ) ; return 0 ; } return 1 ; } int main ( int argc , char * argv [ ] ) { short badAlloc = 0 ; if ( argc > 1 ) { const unsigned int nbArgs = argc - 1 ; if ( ( fileNames = ( char * * ) malloc ( ( nbArgs ) * sizeof ( char * * ) ) ) == NULL ) return 0 ; for ( unsigned int i = 0 ; i < nbArgs ; ++ i ) { if ( ! ( fileNames [ i ] = ( char * ) malloc ( 256 * sizeof ( char ) ) ) ) badAlloc = 1 ; else strncpy ( fileNames [ i ] , argv [ i + 1 ] , 255 ) ; } if ( ! badAlloc ) { for ( unsigned int i = 0 ; i < nbArgs ; ++ i ) if ( printFile ( fileNames [ i ] ) ) printf ( "Argument error, the given argument is not a readable file (%s).\n" , fileNames [ i ] ) ; } for ( unsigned int i = 0 ; i < nbArgs ; ++ i ) free ( fileNames [ i ] ) ; free ( fileNames ) ; } return 0 ; } 
char * * fileNames = NULL ; int printFile ( const char * fileName ) { FILE * fp = ( FILE * ) NULL ; if ( ( fp = fopen ( fileName , "r" ) ) ) { char buffer [ 512 ] ; unsigned int lNumber = 0 ; printf ( ">>> %s\n" , fileName ) ; while ( fgets ( buffer , 512 , fp ) ) { printf ( "%3d: %s" , ++ lNumber , buffer ) ; } fclose ( fp ) ; return 0 ; } return 1 ; } void inputFiltering ( char * fName ) { char buf [ 256 ] = "" ; char * c = fName , * b = buf ; for ( ; * c != '\0' ; c ++ ) { while ( * c == '/' ) c ++ ; * b ++ = * c ; } strncpy ( fName , buf , 255 ) ; } int main ( int argc , char * argv [ ] ) { short badAlloc = 0 ; if ( argc > 1 ) { const unsigned int nbArgs = argc - 1 ; if ( ( fileNames = ( char * * ) malloc ( ( nbArgs ) * sizeof ( char * * ) ) ) == NULL ) return 0 ; for ( unsigned int i = 0 ; i < nbArgs ; ++ i ) { if ( ! ( fileNames [ i ] = ( char * ) malloc ( 256 * sizeof ( char ) ) ) ) badAlloc = 1 ; else { strncpy ( fileNames [ i ] , argv [ i + 1 ] , 255 ) ; inputFiltering ( fileNames [ i ] ) ; } } if ( ! badAlloc ) { for ( unsigned int i = 0 ; i < nbArgs ; ++ i ) if ( printFile ( fileNames [ i ] ) ) printf ( "Argument error, the given argument is not a readable file (%s).\n" , fileNames [ i ] ) ; } for ( unsigned int i = 0 ; i < nbArgs ; ++ i ) free ( fileNames [ i ] ) ; free ( fileNames ) ; } return 0 ; } 
char * * fileNames = NULL ; int printFile ( const char * fileName ) { FILE * fp = ( FILE * ) NULL ; if ( ( fp = fopen ( fileName , "r" ) ) ) { char buffer [ 512 ] ; unsigned int lNumber = 0 ; printf ( ">>> %s\n" , fileName ) ; while ( fgets ( buffer , 512 , fp ) ) { printf ( "%3d: %s" , ++ lNumber , buffer ) ; } fclose ( fp ) ; return 0 ; } return 1 ; } int main ( int argc , char * argv [ ] ) { short badAlloc = 0 ; if ( argc > 1 ) { const unsigned int nbArgs = argc - 1 ; if ( ( fileNames = ( char * * ) malloc ( ( nbArgs ) * sizeof ( char * * ) ) ) == NULL ) return 0 ; for ( unsigned int i = 0 ; i < nbArgs ; ++ i ) { if ( ! ( fileNames [ i ] = ( char * ) malloc ( 256 * sizeof ( char ) ) ) ) badAlloc = 1 ; else strncpy ( fileNames [ i ] , argv [ i + 1 ] , 255 ) ; } if ( ! badAlloc ) { for ( unsigned int i = 0 ; i < nbArgs ; ++ i ) if ( printFile ( fileNames [ i ] ) ) printf ( "Argument error, the given argument is not a readable file (%s).\n" , fileNames [ i ] ) ; } for ( unsigned int i = 0 ; i < nbArgs ; ++ i ) free ( fileNames [ i ] ) ; free ( fileNames ) ; } return 0 ; } 
char * * fileNames = NULL ; int printFile ( const char * fileName ) { FILE * fp = ( FILE * ) NULL ; if ( ( fp = fopen ( fileName , "r" ) ) ) { char buffer [ 512 ] ; unsigned int lNumber = 0 ; printf ( ">>> %s\n" , fileName ) ; while ( fgets ( buffer , 512 , fp ) ) { printf ( "%3d: %s" , ++ lNumber , buffer ) ; } fclose ( fp ) ; return 0 ; } return 1 ; } void inputFiltering ( char * fName ) { char buf [ 256 ] = "" ; char * c = fName , * b = buf ; for ( ; * c != '\0' ; c ++ ) { while ( * c == '/' ) c ++ ; * b ++ = * c ; } strncpy ( fName , buf , 255 ) ; } int main ( int argc , char * argv [ ] ) { short badAlloc = 0 ; if ( argc > 1 ) { const unsigned int nbArgs = argc - 1 ; if ( ( fileNames = ( char * * ) malloc ( ( nbArgs ) * sizeof ( char * * ) ) ) == NULL ) return 0 ; for ( unsigned int i = 0 ; i < nbArgs ; ++ i ) { if ( ! ( fileNames [ i ] = ( char * ) malloc ( 256 * sizeof ( char ) ) ) ) badAlloc = 1 ; else { strncpy ( fileNames [ i ] , argv [ i + 1 ] , 255 ) ; inputFiltering ( fileNames [ i ] ) ; } } if ( ! badAlloc ) { for ( unsigned int i = 0 ; i < nbArgs ; ++ i ) if ( printFile ( fileNames [ i ] ) ) printf ( "Argument error, the given argument is not a readable file (%s).\n" , fileNames [ i ] ) ; } for ( unsigned int i = 0 ; i < nbArgs ; ++ i ) free ( fileNames [ i ] ) ; free ( fileNames ) ; } return 0 ; } 
int printFile ( const char * fileName ) { FILE * fp = ( FILE * ) NULL ; if ( ( fp = fopen ( fileName , "r" ) ) ) { char buffer [ 512 ] ; unsigned int lNumber = 0 ; while ( fgets ( buffer , 512 , fp ) ) { printf ( "%3d: %s" , ++ lNumber , buffer ) ; } fclose ( fp ) ; return 0 ; } return 1 ; } int main ( int argc , char * argv [ ] ) { if ( argc > 1 ) { if ( printFile ( argv [ 1 ] ) ) printf ( "Argument error, the given argument is not a readable file.\n" ) ; } return 0 ; } 
int printFile ( const char * fileName ) { FILE * fp = ( FILE * ) NULL ; if ( ( fp = fopen ( fileName , "r" ) ) ) { char buffer [ 512 ] ; unsigned int lNumber = 0 ; while ( fgets ( buffer , 512 , fp ) ) { printf ( "%3d: %s" , ++ lNumber , buffer ) ; } fclose ( fp ) ; return 0 ; } return 1 ; } void inputFiltering ( char * fName ) { char buf [ 256 ] = "" ; char * c = fName , * b = buf ; for ( ; * c != '\0' ; c ++ ) { while ( * c == '/' ) c ++ ; * b ++ = * c ; } strncpy ( fName , buf , 255 ) ; } int main ( int argc , char * argv [ ] ) { if ( argc > 1 ) { char fName [ 256 ] = "" ; strncpy ( fName , argv [ 1 ] , 255 ) ; inputFiltering ( fName ) ; if ( printFile ( fName ) ) { printf ( "Argument error, the file is not readable.\n" ) ; } } return 0 ; }